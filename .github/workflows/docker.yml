name: Deployment

on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      PORTAINER:
        required: false
        type: boolean
      URL:
        required: false
        type: string
      DOCKER_TARGET:
        required: false
        type: string
      DEPLOY_TAG:
        required: false
        type: string
        default: "TAG"
    secrets:
      PORTAINER_WEBHOOK:
        description: "The webhook to call when pushing to production."
        required: false
      SENTRY_AUTH_TOKEN:
        description: "The sentry auth token to upload sourcemaps with"
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ inputs.DOCKER_TARGET }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_type == 'tag' && needs.build.outputs.version || github.sha }}
          secrets: |
            SHA=${{ github.sha }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache-from: |
            type=gha,scope=runner
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          cache-to: |
            type=gha,mode=max,scope=runner
            type=inline
            
  request-update:
    if: ${{ (github.ref == 'refs/heads/main' || github.ref_type == 'tag') && needs.build.result && inputs.PORTAINER }}
    
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    environment:
      name: production
      url: ${{ inputs.URL }}
    concurrency: production
    
    steps:
      - name: Call Webhook
        run: curl -X POST "${{ secrets.PORTAINER_WEBHOOK }}?${{ inputs.DEPLOY_TAG }}=${{ needs.build.outputs.version }}"
